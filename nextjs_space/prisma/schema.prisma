generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/instagram_content_generator/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  contentJobs   ContentJob[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContentJob {
  id                String      @id @default(cuid())
  userId            String
  status            JobStatus   @default(PENDING)
  originalImageUrl  String
  imagePrompt       String?     // Prompt for image transformation
  videoPrompt       String?     // Prompt for video animation
  transformedImageUrl String?
  animatedVideoUrl  String?
  finalVideoUrl     String?
  progress          Int         @default(0)
  currentStage      ProcessingStage @default(TRANSFORM)
  errorMessage      String?
  cost              Float       @default(0.0) // Cost in USD for this job
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  completedAt       DateTime?

  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_jobs")
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProcessingStage {
  TRANSFORM
  ANIMATE
  FORMAT
  COMPLETED
}
